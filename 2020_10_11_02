/*
Given an array array find the maximum product of subarray sum 
with the minimum element of that subarray
ie. maximize sum(subarr) * min(subarr)
*/

#include <bits/stdc++.h>
using namespace std;

int getSum(int sum[], int l[], int r[], int i) {
    return sum[r[i]] - sum[ max(0,l[i]-1) ];
}

int solve(vector<int> arr, int n) {
    int l[n], r[n], sum[n], i;
    sum[0] = arr[0];
    for(i=1; i<n; i++) sum[i]=sum[i-1]+arr[i];
    
    stack<int> st;
    for(i=0; i<n; i++) l[i]=r[i]=i;
    st.push(0); i=1;
    while(i<n) {
        while(!st.empty() && arr[st.top()]>arr[i]) st.pop();
        l[i] = st.empty() ? 0 : st.top()+1;
        st.push(i++);
    }
    
    while(!st.empty()) st.pop();
    st.push(n-1); i=n-2;
    while(i>-1) {
        while(!st.empty() && arr[st.top()]>arr[i]) st.pop();
        r[i] = st.empty() ? n-1 : st.top()-1;
        st.push(i--);
    }
    
    int prod = INT_MIN;
    for(i=0; i<n; i++)
        prod=max(prod, arr[i]*getSum(sum,l,r,i));
    return prod;
}

int main() {
    int n;
    cin >> n;
    vector<int> arr(n);
    for(int i=0; i<n; i++) cin>>arr[i];
    cout << solve(arr, n) << endl;
    return 0;
}
